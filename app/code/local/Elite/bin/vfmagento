#!/usr/bin/env php
<?php
/**
 * Vehicle Fits
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to sales@vehiclefits.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Vehicle Fits to newer
 * versions in the future. If you wish to customize Vehicle Fits for your
 * needs please refer to http://www.vehiclefits.com for more information.

 * @copyright  Copyright (c) 2013 Vehicle Fits, llc
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

require_once(__DIR__.'/../vendor/autoload.php');

class VF_Magento_CLI
{
    protected $opt;

    function __construct()
    {
        $this->opt = new Zend_Console_Getopt(array(
            'product-table=s'    => 'product table to use for converting SKUs to IDs'
        ));

        $this->requireConfig();
        $this->bootstrap();
        $this->injectDb();
    }

    function bootstrap()
    {
        require_once( getenv('PHP_MAGE_PATH') . '/app/code/local/Elite/Vaf/bootstrap.php' );
        require_once( getenv('PHP_MAGE_PATH') . '/app/Mage.php');
        Mage::app('admin')->setUseSessionInUrl(false);
    }

    /* Figure out where we are reading the database configuration from */
    function requireConfig()
    {
        $config = $this->opt->getOption('config');
        if($config) {
            require_once($config);
        } elseif(file_exists(__DIR__.'/config.php')) {
            require_once(__DIR__ . '/config.php');
        } else {
            require_once(__DIR__ . '/config.default.php');
        }
    }

    /* Inject a database adapter into VF_Singleton using the configuration from previous step */
    function injectDb()
    {
        VF_Singleton::getInstance()->setReadAdapter(new VF_TestDbAdapter(array(
            'dbname' => getenv('PHP_VAF_DB_NAME'),
            'username' => getenv('PHP_VAF_DB_USERNAME'),
            'password' => getenv('PHP_VAF_DB_PASSWORD')
        )));
    }

    function importFitments()
    {
        global $argv;
        if(!isset($argv[count($argv)-1])) {
            echo 'vfmagento <filename>'."\n";
            exit;
        }
        $file = $argv[count($argv)-1];
        $writer = new Zend_Log_Writer_Stream('product-fitments-import.csv.log');
        $log = new Zend_Log($writer);

        $importer = new VF_Import_ProductFitments_CSV_Import($file);
        $importer->setProductTable($this->opt->getOption('product-table'));
        $importer->setLog($log);
        $importer->import();
    }
}

class Elite_CLI_Schema extends VF_CLI_Schema
{
    /* Figure out where we are reading the database configuration from */
    function requireConfig()
    {
        $config = $this->opt->getOption('config');
        if($config) {
            require_once($config);
        } elseif(file_exists(__DIR__.'/config.php')) {
            require_once(__DIR__ . '/config.php');
        } else {
            require_once(__DIR__ . '/config.default.php');
        }
    }
}

$command = isset($argv[1]) ? $argv[1] : null;
switch($command)
{
    case 'importfitments':
        $cli = new VF_Magento_CLI();
        $cli->importFitments();
    break;
    case 'schema':
        $cli = new Elite_CLI_Schema();
        $cli->main();
    break;
}
